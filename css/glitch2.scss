//RGBずらしアニメーション
@function rand($min, $max) {
  @return random() * ($max - $min) + $min;
}
$animation-duration: 3s; // 何秒おきにアニメーションをループするか
$glitch-duration: 20%; // グリッチ (RGB ずらし) 自体の長さ、上記秒数に対するパーセンテージ
$glitch-frequency: 10; // 動きの頻度
$glitch-interval: $glitch-duration / $glitch-frequency;

@mixin rgb-shift($name) {
  @keyframes rgb-shift-#{$name} {
    @for $i from 0 to $glitch-frequency {
      #{$i * $glitch-interval} {
        transform: translate(#{rand(-2, 2) * 1%}, #{rand(-0.5, 0.5) * 1%});
      }
    }

    #{$glitch-duration},
    100% {
      transform: none;
    }
  }

  animation: rgb-shift-#{$name} $animation-duration steps(1, jump-end) infinite alternate
    both;
}
@mixin glitch($name) {
  @keyframes glitch-#{$name} {
    @for $i from 0 to $glitch-frequency {
      $left: 0%;
      $right: 100%;
      $top: rand(0, 90) * 1%; // 切り取る位置 (縦軸0%〜90%内でランダムに動かす)
      $bottom: $top + rand(1, 10) * 1%; // 切り取るサイズ (画像縦幅1%〜10%)

      #{$i * $glitch-interval} {
        clip-path: polygon(
          $left $top,
          $right $top,
          $right $bottom,
          $left $bottom
        );
        transform: translate(
          #{rand(-8, 8) * 1%},
          // 左右にどれぐらい動くか (横幅の±8%)
          #{rand(-0.5, 0.5) *
            1%}
            // 上下にどれぐらい動くか (縦幅の±0.5%)
        );
      }
    }

    #{$glitch-duration},
    100% {
      clip-path: none;
      transform: none;
    }
  }

  animation: glitch-#{$name} $animation-duration linear infinite alternate both;
}

.description {
  padding: 20px;
}
.description h1 span {
  font-size: 18px;
}
.description p {
  margin-top: 10px;
}

#glitch2 {
  background-image: url(../images/bg2.jpg);
  padding-top: calc(1281 / 1920 * 100%);
  width: 100%;
  background-size: 0;
  overflow: hidden;
  position: relative;
  &::before,
  &::after,
  .channel {
    background: inherit;
    background-size: cover;
    position: absolute;
    top: 0;
    bottom: 0;
    left: 0;
    right: 0;
  }
  &::before {
    content: "";
    @include glitch(before);
    clip-path: polygon(0 20%, 100% 20%, 100% 30%, 0 30%);
    transform: translate(5%, 0.5%);
  }
  &::after {
    content: "";
    @include glitch(after);
    clip-path: polygon(0 60%, 100% 60%, 100% 65%, 0 65%);
    transform: translate(-5%, -0.5%);
  }
}

.channel {
  mix-blend-mode: screen;
  &::before {
    position: absolute;
    content: "";
    display: block;
    top: 0;
    bottom: 0;
    left: 0;
    right: 0;
    mix-blend-mode: multiply;
  }
}
.r {
  @include rgb-shift(r);
  &::before {
    background: #f00;
  }
}
.g {
  &::before {
    background: #0f0;
  }
}
.b {
  &::before {
    background: #00f;
  }
}
